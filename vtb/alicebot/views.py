from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
import json
from .models import YandexUser, UserState
from app.models import UserInfo
import secrets
from cryptography.fernet import Fernet

secret_key = b'gnehx6C8O2o2JquonBEzPVrDGfdnRns8K34zzkqiPi8='


def hash_key(key):
    f = Fernet(secret_key)
    encrypted_key = f.encrypt(key.encode())
    return encrypted_key.decode()


def decrypt_key(encrypted_key):
    f = Fernet(secret_key)
    decrypted_key = f.decrypt(encrypted_key.encode())
    return decrypted_key.decode()


@csrf_exempt
def alice_handler(request):
    buttons = []
    card = None  # To include an image card in the response
    if request.method == "POST":
        request_data = json.loads(request.body)
        print(request_data)
        try:
            user_message = request_data['request']['original_utterance']
        except:
            user_message = " ".join(request_data['request']['nlu']['tokens'])
            if user_message == '' or user_message == ' ' or user_message == '  ':
                user_message = ("".join(request_data['request']['payload']['text'])).strip()
        session = request_data['session']
        version = request_data['version']
        yandex_id = session['user_id']

        user, created = YandexUser.objects.get_or_create(yandex_id=yandex_id)
        user_state, _ = UserState.objects.get_or_create(yandex_user=user)
        if not user_message:
            response_text = (
                "–ü—Ä–∏–≤–µ—Ç! üëã –Ø –ø–æ–º–æ–≥—É –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π. "
                "–î–ª—è –Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–ª—é—á —Å –Ω–∞—à–µ–≥–æ —Å–∞–π—Ç–∞ –∏–ª–∏ '–ü–æ–º–æ—â—å', —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ —è —É–º–µ—é. üòä"
            )
            buttons = [
                {"title": "–ü–æ–º–æ—â—å", "payload": {'text': '–ø–æ–º–æ—â—å'}, "hide": True},
            ]
            card = {
                "type": "BigImage",
                "image_id": "1652229/aef5555b595870d5408d",
                "title": "–ü—Ä–∏–≤–µ—Ç! üëã",
                "description": response_text,
            }
            response_data = {
                "response": {
                    "text": response_text,
                    "end_session": False,
                    "buttons": buttons,
                    "card": card,
                },
                "session": session,
                "version": version,
            }
            return JsonResponse(response_data)
        # Check for "–û –Ω–∞–≤—ã–∫–µ" command
        about_phrases = [
            "—Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ", "—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å", "–æ –Ω–∞–≤—ã–∫–µ", "–ø–æ–º–æ—â—å", "–ø–æ–º–æ–≥–∏",
            "–∫–∞–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã", "–∫–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å", "–∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å", "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–≤—ã–∫–µ"
        ]

        if any(phrase in user_message.lower() for phrase in about_phrases):
            response_text = (
                "üòä –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å. "
                "–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n"
                "üîë *–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞* ‚Äî –°–∫–∞–∂–∏ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á, —á—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç.\n"
                "‚úÖ *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—Ö–æ–¥–∞* ‚Äî –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–π –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –≤—Ö–æ–¥—ã –≤ —Å–∏—Å—Ç–µ–º—É.\n"
                "‚ùå *–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞* ‚Äî –ï—Å–ª–∏ –Ω—É–∂–Ω–æ, –ª–µ–≥–∫–æ –æ—Ç–≤—è–∂—É —Ç–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç.\n\n"
                "–î–ª—è —Ä–∞–±–æ—Ç—ã –ø—Ä–æ—Å—Ç–æ –ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—ã, –∞ —è –≤—Å–µ —Å–¥–µ–ª–∞—é! üöÄ\n"
            )
            card = {
                "type": "BigImage",
                "image_id": "1540737/d1fc457bf0a80bb85d37",
                "title": "–û –Ω–∞–≤—ã–∫–µ",
                "description": response_text,
            }
            response_data = {
                "response": {
                    "text": response_text,
                    "end_session": False,
                    "buttons": buttons,
                    "card": card
                },
                "session": session,
                "version": version
            }
            return JsonResponse(response_data)


        if not user.secret_key:
            if user_state.state == "WAITING_FOR_KEY":
                input_secret_key = user_message.strip()
                hashed_input_key = hash_key(input_secret_key)
                user_info_list = UserInfo.objects.all()
                key_found = False

                for user_info in user_info_list:
                    decrypted_key = decrypt_key(user_info.secret_key)
                    if decrypted_key == input_secret_key:
                        user.secret_key = hashed_input_key
                        user.save()
                        user_state.state = "CONNECTED"
                        user_state.save()
                        user_info.has_yandex_2fa = True
                        user_info.save()

                        response_text = "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á—ë–Ω! üéâ"
                        buttons = [
                            {
                                "title": "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Ö–æ–¥ ‚úÖ",
                                "payload": {'text': '–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'},
                                "hide": True
                            },
                            {
                                "title": "–û—Ç–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç ‚ùå",
                                "payload": {'text': '–æ—Ç–≤—è–∑–∞—Ç—å'},
                                "hide": True
                            }
                        ]
                        card = {
                            "type": "BigImage",
                            "image_id": "14236656/be67258622b6c759871a",
                            "title": "–£—Å–ø–µ—Ö! üéâ",
                            "description": "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –ø–æ–¥–∫–ª—é—á—ë–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–º.",
                        }
                        key_found = True
                        break

                if not key_found:
                    response_text = "–û—à–∏–±–∫–∞: —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É. üîê"
                    card = {
                        "type": "BigImage",
                        "image_id": "965417/ac589715dc7f76ec3a10",
                        "title": "–û—à–∏–±–∫–∞ ‚ùå",
                        "description": response_text,
                    }
            else:
                user_state.state = "WAITING_FOR_KEY"
                user_state.save()
                response_text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á. üîë"
                card = {
                    "type": "BigImage",
                    "image_id": "965417/55b4c33d215570b38ef9",
                    "title": "–í–Ω–∏–º–∞–Ω–∏–µ! üîë",
                    "description": response_text,
                }
                buttons = [
                    {"title": "–ü–æ–º–æ—â—å", "payload": {'text': '–ø–æ–º–æ—â—å'}, "hide": True}
                ]

        else:
            confirmation_phrases = ["–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Ö–æ–¥", "–¥–∞", "–≤—Ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é", '–≤–æ–π—Ç–∏', '–≤—Ö–æ–¥', '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é', '–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å']
            unlink_phrases = ["–æ—Ç–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç", "–æ—Ç–º–µ–Ω–∏—Ç—å —Å–≤—è–∑—å", "—Ä–∞–∑—ä–µ–¥–∏–Ω–∏—Ç—å", "–æ—Ç–∫–ª—é—á–∏—Ç—å", '–æ—Ç–≤—è–∑–∞—Ç—å']
            if any(phrase in user_message.lower() for phrase in confirmation_phrases):
                user_info_list = UserInfo.objects.all()
                for user_info in user_info_list:
                    decrypted_key = decrypt_key(user_info.secret_key)
                    if decrypted_key == decrypt_key(user.secret_key):
                        user_info.made_2fa = True
                        user_info.save()
                        response_text = "–í—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω! ‚úÖ"
                        buttons = [
                            {
                                "title": "–û—Ç–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç ‚ùå",
                                "payload": {'text': '–æ—Ç–≤—è–∑–∞—Ç—å'},
                                "hide": True
                            }
                        ]
                        card = {
                            "type": "BigImage",
                            "image_id": "14236656/be67258622b6c759871a",
                            "title": "–í—Ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω ‚úÖ",
                            "description": "–í–∞—à –≤—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
                        }
                        break
                else:
                    response_text = "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Ö–æ–¥. ‚ùå"
                    card = {
                        "type": "BigImage",
                        "image_id": "965417/ac589715dc7f76ec3a10",
                        "title": "–û—à–∏–±–∫–∞ ‚ùå",
                        "description": response_text,
                    }
            elif any(phrase in user_message.lower() for phrase in unlink_phrases):
                for user_info in UserInfo.objects.all():
                    decrypted_key = decrypt_key(user_info.secret_key)
                    if decrypted_key == decrypt_key(user.secret_key):
                        user_info.has_yandex_2fa = False
                        user_info.save()
                        break
                user.secret_key = None
                user.save()
                user_state.state = "DISCONNECTED"
                user_state.save()
                response_text = "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–Ω. ‚ùå"
                card = {
                    "type": "BigImage",
                    "image_id": "965417/30c3fa628c264559ca66",
                    "title": "–£—Å–ø–µ—à–Ω–æ ‚ùå",
                    "description": response_text,
                }
            else:
                response_text = "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø–æ–¥–∫–ª—é—á—ë–Ω. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Ö–æ–¥, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ. ‚úÖ"
                buttons = [
                    {
                        "title": "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Ö–æ–¥ ‚úÖ",
                        "payload": {'text': '–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'},
                        "hide": True
                    },
                    {
                        "title": "–û—Ç–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç ‚ùå",
                        "payload": {'text': '–æ—Ç–≤—è–∑–∞—Ç—å'},
                        "hide": True
                    }
                ]

        response_data = {
            "response": {
                "text": response_text,
                "end_session": False,
            },
            "session": session,
            "version": version
        }

        if buttons:
            response_data["response"]["buttons"] = buttons

        if card:
            response_data["response"]["card"] = card

        return JsonResponse(response_data)
    else:
        return JsonResponse({"error": "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –º–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞"}, status=405)
